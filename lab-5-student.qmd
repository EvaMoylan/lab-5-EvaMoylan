---
title: "Lab 5: Murder in SQL City"
author: "Eva Moylan"
date: "10/27/24"
format: 
  html:  
    embed-resources: true
    code-tools: true
editor: source
execute: 
  echo: true
code-fold: true
theme: sandstone
---

For this lab, you will be joining and filtering related datasets to solve a murder mystery!

## Instructions

Northwestern University's Knight Lab wanted to help sharpen users' database skills, so they created a murder mystery. Can you solve this crime in SQL City??

The relational data you will be working with contains tables with different pieces of information pertinent to the crime - people, social media check-ins, driver's licenses, crime scene reports, police interviews, and more!

![Database schema](https://mystery.knightlab.com/schema.png)

Solve the murder mystery, showing **all of your work in this document**. Your document and code must be well organized, easy to follow, and reproducible.

+ Use headers and written descriptions to indicate what you are doing.
+ Use `dplyr` verbs and `join` functions rather than just looking through the tables manually.
+ Use good code formatting practices.
+ Comment your code.
+ Cite any external sources you use to solve the mystery.

### Tips 

You may find the `pull()` function handy for displaying each clue as you go along.


## Access the Data

This code chunk will read in all of the tables of data for you. Don't modify or remove this!

```{r}
#| message: false
#| warning: false
#| label: read-in-data

library(tidyverse)
library(purrr)

source("https://raw.githubusercontent.com/atheobold/groupworthy-data-science/main/labs/instructions/lab-5-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police departmentâ€™s database and follow the clues to find the person responsible for the murder?!

```{r}
#| label: inspecting-crime-scene-report

crime_scene_report |>
  filter(type == "murder",
         date == "20180115",
         city == "SQL City") |>
  pull(description)

```

**Follow the evidence to the person responsible for the murder, building a report as you go.**
Hint: Make sure you check for interviews with any suspects!

### Witness Interviews
```{r}
#| label: finding-witnesses

#Join interviews data and person data, to find witnesses based on their address
interview |>
  inner_join(person, #keeps only rows in 'person' that are also in 'interview'
             by = join_by(person_id == id)) |> #join using key: person_id (interviews) and id (person)
  mutate(is_Annabel = str_detect(string = name,
                                 pattern = "Annabel"),
         .after = name) |> #new column after the name column with T/F if the person's first name is Annabel
  filter(address_street_name %in% c("Northwestern Dr",
                                    "Franklin Ave"),
         address_number == max(address_number) | #either highest address number *or* name is Annabel
         is_Annabel == TRUE) |>
  pull(transcript) #1 = Morty Schapiro, #2 = Annabel Miller

```
### Applying Witness Accounts
```{r}
#| label: applying-witness-accounts

#Combine data sets to have member_id, member_status, license plate, check-in date

get_fit_now_check_in |>
  inner_join(get_fit_now_member,
             by = join_by(membership_id == id)) |>
  inner_join(person,
             by = join_by(person_id == id,
                          name == name)) |> #two keys, name and id's
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>
  mutate(plate_number = str_detect(string = plate_number,
                                    pattern = "H42W"),
         membership_id = str_detect(string = membership_id,
                                    pattern = "48Z")) |>
  filter(gender == "male",
         membership_status == "gold",
         check_in_date == "20180109",
         membership_id == TRUE,
         plate_number == TRUE) |>
  pull(name)

```


## And the final suspect is...

*Jeremy Bowers*
