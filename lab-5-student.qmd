---
title: "Lab 5: Murder in SQL City"
author: "Eva Moylan"
date: "11/08/24"
format: 
  html:  
    embed-resources: true
    code-tools: true
editor: source
execute: 
  echo: true
code-fold: true
theme: sandstone
---

For this lab, you will be joining and filtering related datasets to solve a murder mystery!

## Instructions

Northwestern University's Knight Lab wanted to help sharpen users' database skills, so they created a murder mystery. Can you solve this crime in SQL City??

The relational data you will be working with contains tables with different pieces of information pertinent to the crime - people, social media check-ins, driver's licenses, crime scene reports, police interviews, and more!

![Database schema](https://mystery.knightlab.com/schema.png)

Solve the murder mystery, showing **all of your work in this document**. Your document and code must be well organized, easy to follow, and reproducible.

+ Use headers and written descriptions to indicate what you are doing.
+ Use `dplyr` verbs and `join` functions rather than just looking through the tables manually.
+ Use good code formatting practices.
+ Comment your code.
+ Cite any external sources you use to solve the mystery.

### Tips 

You may find the `pull()` function handy for displaying each clue as you go along.


## Access the Data

This code chunk will read in all of the tables of data for you. Don't modify or remove this!

```{r}
#| message: false
#| warning: false
#| label: read-in-data

library(tidyverse)
library(purrr)

source("https://raw.githubusercontent.com/atheobold/groupworthy-data-science/main/labs/instructions/lab-5-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police departmentâ€™s database and follow the clues to find the person responsible for the murder?!

```{r}
#| label: inspecting-crime-scene-report

crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(type == "murder",
         date == "2018-01-15",
         city == "SQL City") |>
  pull(description)

```

**Follow the evidence to the person responsible for the murder, building a report as you go.**
Hint: Make sure you check for interviews with any suspects!

### Witness Interviews
```{r}
#| label: finding-witnesses

#Join interviews data and person data, to find witnesses based on their address
interview |>
  inner_join(person, #keeps only rows in 'person' that are also in 'interview'
             by = join_by(person_id == id)) |> #join using key: person_id (interviews) and id (person)
  mutate(is_Annabel = str_detect(string = name,
                                 pattern = "Annabel"),
         .after = name) |> #new column after the name column with T/F if the person's first name is Annabel
  filter(address_street_name %in% c("Northwestern Dr",
                                    "Franklin Ave"),
         address_number == max(address_number) | #either highest address number *or* name is Annabel
         is_Annabel == TRUE) |>
  pull(transcript) #1 = Morty Schapiro, #2 = Annabel Miller

```

### Applying Witness Accounts
```{r}
#| label: applying-witness-accounts

#Combine data sets to have member_id, member_status, license plate, check-in date
suspect_1 <- get_fit_now_check_in |>
  right_join(get_fit_now_member,
             by = join_by(membership_id == id)) |>
  left_join(person,
             by = join_by(person_id == id,
                          name == name)) |> #two keys, name and id's
  inner_join(drivers_license,
             by = join_by(license_id == id)) |>
  mutate(plate_number = str_detect(string = plate_number,
                                    pattern = "H42W")) |>
  filter(gender == "male",
         membership_status == "gold",
         check_in_date == "20180109", #change this
         plate_number == TRUE,
         str_detect(string = membership_id,
                    pattern = "^48Z"))

#Note: Join functions changed from inner to right and left, ^ added to membership_id pattern detection and membership_id str_detect moved to a filter instead of a mutate.

```

### Bowers's Interview
```{r}
#| label: suspect1-interview

interview |>
  semi_join(suspect_1, #Keep only the row containing the suspect found in previous step
            join_by(person_id)) |>
  pull(transcript)

#Note: Filtering by person_id was replaced with a semi_join.

```

### Investigate Bowers's Statement
```{r}
#| label: investigate-bowers

no_concert <- facebook_event_checkin |>
  mutate(date = ymd(date), #Convert to year-month-day format
         `date_2017` = if_else(year(date) != 2017, #If the year isn't 2017
                            TRUE, #Then true
                            FALSE)) |> #If else, then false
  filter(event_name != "SQL Symphony Concert", #Keep only people who did not attend the concert
         `date_2017` == TRUE) #Keep only dates not in 2017

suspect_2 <- person |>
  anti_join(no_concert, #remove people who didn't attend the concert
            by = join_by(id == person_id)) |>
  inner_join(drivers_license,
             by = join_by(license_id == id),
             suffix = c("_person", "_license")) |>
  filter(gender == "female",
         height %in% 65|67,
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S") |>
  inner_join(income,
            by = join_by(ssn)) |>
  slice_max(annual_income)

#Note: This code was re-written to include anti_join. A no_concert object was
      #created with all people who didn't attend the concert in years besides 2017. 
      #The other joining steps were re-ordered to include the anti_join at the 
      #beginning of the suspect_2 pipeline.
```

### Priestly's Interview
```{r}
#| label: suspect2-interview
#| eval: false

interview |>
  semi_join(suspect_2, #Keep only the row containing the suspect found in previous step
            join_by(person_id)) |>
  pull(transcript) #error: so no interview for Miranda Priestly

#Note: Filtering by person_id was replaced with a semi_join.

```

## And the final suspect is...

*Miranda Priestly hired Jeremy Bowers to commit the crime.*

*Reflection: Originally, I didn't investigate beyond finding Jeremy Bowers. When investigating his statement, I was able to gain practice using semi_join() and using this method is more efficient than joining and using filter(). In the future, I will double check I'm reading all the hints on questions!*
